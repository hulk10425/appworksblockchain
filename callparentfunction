pragma solidity ^0.8.0;

contract E {
    event log(string _name);

    function foo() public virtual {
        emit log("E.foo");
    }

    function bar() public virtual{
        emit log("E.bar");
    }
}


contract F is E{
    
    function foo() public override virtual{
        emit log("F.foo");
        E.foo();
    }

    function bar() public override virtual {
        emit log("F.bar");
        super.bar();
    }
}


contract G is E{
    
    function foo() public override virtual {
        emit log("G.foo");
    }

    function bar() public override virtual {
        emit log("G.bar");
        super.bar();
    }
}


contract H is F , G{
    
    function foo() public override (F,G) {
        F.foo();
    }

    function bar() public override (F,G) {
        super.bar();
    }
}
